# -*- coding: utf-8 -*-

# "THE BEER-WARE LICENSE" (Revision 42):
# eithe and burnbay @plexforums wrote this file.  As long as you retain this
# notice you can do whatever you want with this stuff. If we meet some day,
# and you think this stuff is worth it, you can buy us a beer in return. Eirik H.

# Some of this stuff is from:
# jonklo's NRK Plex plugin: https://github.com/plexinc-plugins/NRK.bundle
# takoi's NRK XBMC plugin: https://github.com/takoi/xbmc-addon-nrk
# Please comply with their licenses, I haven't looked at them yet.

# NRK, if you are watching, don't hesitate to make contact.

# http://nordond16b-f.akamaihd.net/i/no/open/c6/c648699108737a5849995…a58499953e2094e1cb377a50045_,141,316,563,1266,2250,.mp4.csmil/master.m3u8
import re

RESOLUTIONS = ["1080"]
RE_VIDEO_URL = Regex('\/program\/([^\/]+)')

def MetadataObjectForURL(url):
    # Request the URL
    page = HTML.ElementFromURL(url)
    # Extract the details available directly form the page.
    title = page.xpath("//meta[@name='title']")[0].get('content')
    summary = page.xpath("//meta[@name='description']")[0].get('content')
    thumb = page.xpath("//*[@id='episode2']/div/img")[0].get('src')

    # Return an object to Plex
    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = thumb)
    
def MediaObjectsForURL(url):
    #Log.Debug("NRK: Adding media object for program: " + url)
    video_id = RE_VIDEO_URL.search(url).groups()[0]
    mobjects = []
    for res in reversed(RESOLUTIONS):
        mobjects.append(MediaObject(
            parts = [PartObject(key=HTTPLiveStreamURL(Callback(GetMediaURL,video_id = video_id)))],
            video_resolution = res,
            optimized_for_streaming = True,
            audio_channels = 2))
    
    return mobjects

def GetMediaURL(video_id):
    mediaMetadataUrl = "http://v7.psapi.nrk.no/mediaelement/%s" % video_id
    mediaUrl = JSON.ObjectFromURL(mediaMetadataUrl)['mediaUrl']
    Log.Debug("MEDIA URL: " + mediaUrl)
    return Redirect(mediaUrl.replace('/z/', '/i/').replace('manifest.f4m', 'master.m3u8'))
