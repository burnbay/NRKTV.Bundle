# -*- coding: utf-8 -*-

# "THE BEER-WARE LICENSE" (Revision 42):
# eithe and burnbay @plexforums wrote this file.  As long as you retain this
# notice you can do whatever you want with this stuff. If we meet some day,
# and you think this stuff is worth it, you can buy us a beer in return. Eirik H.

# Some of this stuff is from:
# jonklo's NRK Plex plugin: https://github.com/plexinc-plugins/NRK.bundle
# takoi's NRK XBMC plugin: https://github.com/takoi/xbmc-addon-nrk
# Please comply with their licenses, I haven't looked at them yet.

# NRK, if you are watching, don't hesitate to make contact.


API_META_URL = "http://v7.psapi.nrk.no/mediaelement/%s"
LIVE_TV_STATIONS = (
    {
        'title': 'NRK 1', 
        'url': 'http://tv.nrk.no/direkte/nrk1',
        'desc': u'Bredt og variert programtilbud. Norges største tv-kanal.', 
        'img': 'nrk1.png'
    },
    {
        'title': 'NRK 2', 
        'url': 'http://tv.nrk.no/direkte/nrk2',
        'desc': u'Fordypningskanalen. Bakgrunns-, dokumentar og nyhetskanal.', 
        'img': 'nrk2.png'
    }, 
    {
        'title': 'NRK Super / NRK 3', 
        'url': 'http://tv.nrk.no/direkte/nrk3',
        'desc': u'Den tredje kanalen tilbyr vekselsvis et barnetilbud og et tilbud for unge voksne med serier, humor film.', 
        'img': 'nrk3.png'
    }
)

USERAGENT_FOR_CLIENTS = (
    {
        ClientPlatform.MacOSX: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10',
        ClientPlatform.Linux: 'Mozilla/5.0 (X11; CrOS i686 4319.74.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36',
        ClientPlatform.Windows: 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36',
        ClientPlatform.iOS: 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        ClientPlatform.Android: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.34 Safari/534.24',
        ClientPlatform.Roku: 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        'Plex Home Theater': 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        'Safari': 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        'Chrome': 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        'Unknown Browser': 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10'
    }
)

def MetadataObjectForURL(url):
    channel = url.replace('http://tv.nrk.no/direkte/','')
    if channel == 'nrk1':
        station = LIVE_TV_STATIONS[0]
    elif channel == 'nrk2':
        station = LIVE_TV_STATIONS[1]
    else:
        station = LIVE_TV_STATIONS[2]
    
    title = station['title']
    summary = station['desc']
    thumb = R(station['img'])
    fanart = R(station['img'])
    
    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = thumb,
        art = fanart)
    
def MediaObjectsForURL(url):
    video_id = url.replace('http://tv.nrk.no/direkte/','')
    return [
            MediaObject(
                container = 'mpegts',
                video_codec = VideoCodec.H264,
                audio_codec = AudioCodec.AAC,
                optimized_for_streaming = True,
                audio_channels = 2,
                parts = [
                        PartObject(
                                key = HTTPLiveStreamURL(Callback(PlayVideo, video_id = video_id))
                                #key = HTTPLiveStreamURL(PlayVideo(video_id))
                            )
                        ]
                )
            ]
 
@indirect
def PlayVideo(video_id):
    mediaMetadataUrl = API_META_URL % video_id
    user_agent = USERAGENT_FOR_CLIENTS[Client.Platform]
    video_url = JSON.ObjectFromURL(mediaMetadataUrl, headers={'User-Agent': user_agent})['mediaUrl']
    #video_url = "https://nrk1us-f.akamaihd.net/i/nrk1us_0@102847/index_3528_av-b.m3u8?sd=10&rebase=on&e=1&id=AgBU6shyUacmRvF9llIeVsNyOlFPrQVMSCI0M%2fPkZNfNJIQSxTGwsj4QcfGOJ82av4omvDvZCRILHg%3d%3d"
    #Log.Debug("CLIENT: " + Client.Platform + ", CLIENT PROTOCOLS: " + str(Client.Protocols) + ", USER_AGENT: " + user_agent)
    return IndirectResponse(
        VideoClipObject,
        key = HTTPLiveStreamURL(GetClientDependentURL(video_url))
    )
    
def GetClientDependentURL(url):
    if Client.Platform in ['MacOSX', 'Windows', None]:
        streams = GetHLSStreams(url)
    
        # Return highest bitrate url since PMC can't handle HLS correctly
        # Also consider a client not identifying itself as needing help,
        # the Samsung client is one of those. 
        #Log.Debug("STREAM URL: " + streams[0]['url'])
        return streams[0]['url']
    else:
        # Other clients can handle HLS correctly
        #Log.Debug("STREAM URL: " + url)
        return url 

def GetHLSStreams(url):
    streams = []

    playList = HTTP.Request(url).content
    #Log.Debug("M3U8: " + playList)
    
    # Parse the m3u8 file to get:
    # - URL
    # - Resolution
    # - Bitrate
    for line in playList.splitlines():
        if "BANDWIDTH" in line:
            stream            = {}
            stream["bitrate"] = int(Regex('(?<=BANDWIDTH=)[0-9]+').search(line).group(0))        
            #Log.Debug("BITRATE=" + str(stream["bitrate"]))
            if "RESOLUTION" in line:
                stream["resolution"] = int(Regex('(?<=RESOLUTION=)[0-9]+x[0-9]+').search(line).group(0).split("x")[1])
                #Log.Debug("RESOLUTION=" + str(stream["resolution"]))
            else:
                stream["resolution"] = 0

        elif ".m3u8" in line:
            #Log.Debug("LINE: " + line)
            if not line.startswith("https://"):
                path          = url[ : url.rfind('/') + 1]
                stream["url"] = path + line
            else:
                stream["url"] = line
                
            #Log.Debug("STREAM URL: " + stream["url"])
            streams.append(stream)
                
    sorted_streams = sorted(streams, key = lambda stream: stream["bitrate"], reverse = True)        

    return sorted_streams
